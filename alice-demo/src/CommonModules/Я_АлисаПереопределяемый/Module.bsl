						
						
// Позволяет переопределить формирование данных ответа
//
// Параметры:
//  ДанныеОтвета			 - Неопределено	 - Данные, которые должны быть переданы пользователю в ответ на команду
//  НовоеСостояниеСессии	 - Структура	 - Данные, которые нужно сохранить в рамках сессии до следующей команды
//  Команда					 - Строка	 - Текст, который произнес пользователь
//  ТекущееСостояниеСессии	 - Структура	 - Данные, которые были сохранены при обработке предыдущей команды
//
Процедура ПриФормированииОтвета(ДанныеОтвета, НовоеСостояниеСессии, Знач Команда, Знач ТекущееСостояниеСессии) Экспорт	
	
	Сценарий = Я_ОбщегоНазначения.СвойствоСтруктуры(ТекущееСостояниеСессии, "Сценарий");
	
	Если Не ЗначениеЗаполнено(Сценарий) Тогда
		Если СтрНачинаетсяС(Команда, "повтори фразу") Тогда
			ДанныеОтвета = ДанныеОтвета_ПовторФразы(Команда);
		ИначеЕсли СтрНачинаетсяС(Команда, "напиши в телеграм") Тогда
			ДанныеОтвета = ДанныеОтвета_НапишиВТелеграм(Команда);
		ИначеЕсли СтрНачинаетсяС(Команда, "спроси нейросеть") Тогда
			ДанныеОтвета = ДанныеОтвета_СпросиНейросеть(Команда);
		ИначеЕсли Команда = "сообщи показатель" Тогда
			ДанныеОтвета = ДанныеОтвета_ЗначениеПоказателя(Команда, НовоеСостояниеСессии);
		ИначеЕсли Команда = "отправь отчет" Или  Команда = "отправь отчёт" Тогда
			ДанныеОтвета = ДанныеОтвета_ОтправкаОтчета(Команда, НовоеСостояниеСессии);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Сценарий = "ЗначениеПоказателя" Тогда
		ДанныеОтвета = ДанныеОтвета_СценарийЗначениеПоказателя(Команда);
		Возврат;
	КонецЕсли;  
	
	Если Сценарий = "ОтправкаОтчета" Тогда
		ДанныеОтвета = ДанныеОтвета_СценарийОтправкаОтчета(Команда, НовоеСостояниеСессии, ТекущееСостояниеСессии);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеОтвета_ПовторФразы(Команда)
	
	ТекстОтвета = "Вы сказали " + Сред(Команда, 15);
	ДанныеОтвета = Я_Алиса.ДанныеОтвета(ТекстОтвета, Я_Алиса.СтандартныеКнопки());
	Возврат ДанныеОтвета;
	
КонецФункции

Функция ДанныеОтвета_СпросиНейросеть(Команда)
	
	ТекстВопроса = Сред(Команда, 18);      
	
	Токен = Константы.АссистентТокенЧатГПТ.Получить();
	
	Результат = АссистентИнтеграцияСOpenAI.ОтправитьСообщение(ТекстВопроса, Токен, Ложь);
	
	ДанныеОтвета = Я_Алиса.ДанныеОтвета(Результат.Ответ);
	
	Возврат ДанныеОтвета;
	
КонецФункции

Функция ДанныеОтвета_ЗначениеПоказателя(Команда, НовоеСостояниеСессии)
	
	ТекстОтвета = "Назовите показатель. Я могу сообщить обороты по счетам и количество работников.";
	
	Кнопки = Новый Массив;
	Кнопки.Добавить(Я_Алиса.Кнопка("Обороты по счетам")); 
	Кнопки.Добавить(Я_Алиса.Кнопка("Количество работников"));
	
	ДанныеОтвета = Я_Алиса.ДанныеОтвета(ТекстОтвета, Кнопки);
	
	НовоеСостояниеСессии = Я_Алиса.НовоеСостояниеСессии("ЗначениеПоказателя");
	
	Возврат ДанныеОтвета;
	
КонецФункции

Функция ДанныеОтвета_ОтправкаОтчета(Команда, НовоеСостояниеСессии)
	
	ТекстОтвета = "Функция отправки отчета работает в тестовом режиме. Назовите название отчета";
	ДанныеОтвета = Я_Алиса.ДанныеОтвета(ТекстОтвета, Я_Алиса.СтандартныеКнопки());
	
	НовоеСостояниеСессии = Я_Алиса.НовоеСостояниеСессии("ОтправкаОтчета");
	
	Возврат ДанныеОтвета;
	
КонецФункции

Функция ДанныеОтвета_НапишиВТелеграм(Команда)
	
	ТекстСообщения = Сред(Команда, 19);
	
	Токен = Константы.Я_ТокенТелеграмБота.Получить();
	ИдентификаторЧата = Константы.Я_ИдентификаторЧата.Получить();
	
	Если Не ЗначениеЗаполнено(Токен) Или Не ЗначениеЗаполнено(ИдентификаторЧата) Тогда
		ТекстОтвета = "Не настроен телеграм бот, обратитесь к администратору навыка.";
		ДанныеОтвета = Я_Алиса.ДанныеОтвета(ТекстОтвета, Я_Алиса.СтандартныеКнопки());
		Возврат ДанныеОтвета;
	КонецЕсли;
			
	Сообщение = Новый Структура;
	Сообщение.Вставить("chat_id", ИдентификаторЧата);
	Сообщение.Вставить("parse_mode", "HTML");
	Сообщение.Вставить("text", ТекстСообщения);
			
	Соединение = Новый HTTPСоединение("api.telegram.org",,,,, 120, Новый ЗащищенноеСоединениеOpenSSL());
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	URN = СтрШаблон("bot%1/%2",	Токен, "sendMessage");	
	
	Запрос = Новый HTTPЗапрос(URN, Заголовки);
	
	Запрос.УстановитьТелоИзСтроки(Я_ОбработкаJSON.ОбъектВJSON(Сообщение));
	
	Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
			
	Если Ответ.КодСостояния <> 200 Тогда
		ЗаписьЖурналаРегистрации("ОшибкаОтправкиТелеграм", УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон(
				"Ошибка взаимодействия с телеграм: %1
					|%2", 
				Ответ.КодСостояния, 
				Ответ.ПолучитьТелоКакСтроку()));
	КонецЕсли;
	
	ТекстОтвета = "Сообщение отправлено.";
	ДанныеОтвета = Я_Алиса.ДанныеОтвета(ТекстОтвета, Я_Алиса.СтандартныеКнопки());
	
	Возврат ДанныеОтвета;
	
КонецФункции

Функция ДанныеОтвета_СценарийЗначениеПоказателя(Команда)
	
	Если Команда = "количество работников" Тогда
		ТекстОтвета = ПолучитьКоличествоРаботников();
	ИначеЕсли Команда = "обороты по счетам" Тогда
		ТекстОтвета = ПолучитьОборотыПоСчетам();
	Иначе
		ТекстОтвета = "Я не знаю такого показателя";
	КонецЕсли;
	
	ТекстОтвета = ТекстОтвета + " Выберите следующее действие. Я могу повторить фразу, написать в телеграм, сообщить показатель или отправить отчет";
	
	ДанныеОтвета = Я_Алиса.ДанныеОтвета(ТекстОтвета, Я_Алиса.СтандартныеКнопки());
	
	Возврат ДанныеОтвета;
	
КонецФункции

Функция ДанныеОтвета_СценарийОтправкаОтчета(Команда, НовоеСостояниеСессии, ТекущееСостояниеСессии)
	
	Отчет = Я_ОбщегоНазначения.СвойствоСтруктуры(ТекущееСостояниеСессии, "Отчет");
	Если Не ЗначениеЗаполнено(Отчет) Тогда
		ТекстОтвета = "Назовите имя пользователя, которому отправить отчет";
		ДанныеОтвета = Я_Алиса.ДанныеОтвета(ТекстОтвета);
		НовоеСостояниеСессии = ТекущееСостояниеСессии;
		НовоеСостояниеСессии.Вставить("Отчет", Команда);
	Иначе
		ТекстОтвета = СтрШаблон("Отчет %1 отправлен на почту пользователю %2. Выберите следующее действие. Я могу повторить фразу, написать в телеграм, сообщить показатель или отправить отчет",
			Отчет, Команда);
		ДанныеОтвета = Я_Алиса.ДанныеОтвета(ТекстОтвета, Я_Алиса.СтандартныеКнопки());
	КонецЕсли;
	
	Возврат ДанныеОтвета;
	
КонецФункции

Функция ПолучитьКоличествоРаботников()
	
	Если Метаданные.РегистрыСведений.Найти("_ДемоРаботникиОрганизаций") = Неопределено Тогда
		Возврат "Показатель не поддерживается в текущей конфигурации.";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ _ДемоРаботникиОрганизацийСрезПоследних.ФизическоеЛицо) КАК КоличествоРаботников
	               |ИЗ
	               |	РегистрСведений._ДемоРаботникиОрганизаций.СрезПоследних КАК _ДемоРаботникиОрганизацийСрезПоследних
	               |ГДЕ
	               |	_ДемоРаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок > 0";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Строка = СтрокаСЧислом(";%1 работник;;%1 работника;%1 работников;%1 работника",
	    Выборка.КоличествоРаботников,
	    ВидЧисловогоЗначения.Количественное,
	    "L=ru");
	
	Возврат "На сегодняшний день на предприятии " + Строка + ".";
	
КонецФункции

Функция ПолучитьОборотыПоСчетам()
	
	Если Метаданные.РегистрыСведений.Найти("_ДемоОборотыПоСчетамНаОплату") = Неопределено Тогда
		Возврат "Показатель не поддерживается в текущей конфигурации.";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	_ДемоОборотыПоСчетамНаОплатуОбороты.СуммаОборот КАК СуммаОборот
	               |ИЗ
	               |	РегистрНакопления._ДемоОборотыПоСчетамНаОплату.Обороты КАК _ДемоОборотыПоСчетамНаОплатуОбороты";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Оборот = Окр(Выборка.СуммаОборот);
	Иначе
		Оборот = 0;
	КонецЕсли;
	
	Строка = СтрокаСЧислом(";%1 рубль;;%1 рубля;%1 рублей;%1 рубля",
	    Оборот,
	    ВидЧисловогоЗначения.Количественное,
	    "L=ru");
	
	Возврат "Обороты за все время " + Строка + ".";

КонецФункции

